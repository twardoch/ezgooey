# this_file: .github/workflows/release.yml
name: Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run tests
      run: |
        python -m pytest tests/ -v --cov=ezgooey --cov-report=term-missing

    - name: Test package installation
      run: |
        pip install -e .
        python -c "import ezgooey; print(f'âœ… ezgooey version: {ezgooey.__version__}')"

  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        pip install -r requirements.txt

    - name: Get version from tag
      id: get_version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        python -m twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: python-package-${{ steps.get_version.outputs.version }}
        path: dist/
        retention-days: 30

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.tag }}
        release_name: Release ${{ steps.get_version.outputs.version }}
        body: |
          ## Changes in ${{ steps.get_version.outputs.version }}
          
          This release was automatically generated from git tag ${{ steps.get_version.outputs.tag }}.
          
          ### Installation
          
          ```bash
          pip install ezgooey==${{ steps.get_version.outputs.version }}
          ```
          
          ### Download
          
          - [Source distribution (tar.gz)](https://github.com/${{ github.repository }}/releases/download/${{ steps.get_version.outputs.tag }}/ezgooey-${{ steps.get_version.outputs.version }}.tar.gz)
          - [Built distribution (wheel)](https://github.com/${{ github.repository }}/releases/download/${{ steps.get_version.outputs.tag }}/ezgooey-${{ steps.get_version.outputs.version }}-py3-none-any.whl)
          
          For detailed changes, see the [commit history](https://github.com/${{ github.repository }}/commits/${{ steps.get_version.outputs.tag }}).
        draft: false
        prerelease: false

    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/
        asset_name: ezgooey-${{ steps.get_version.outputs.version }}-dist.zip
        asset_content_type: application/zip

  publish-pypi:
    needs: [test, build]
    runs-on: ubuntu-latest
    environment: release
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        pip install -r requirements.txt

    - name: Build package
      run: |
        python -m build

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        verbose: true